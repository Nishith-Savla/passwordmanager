diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
index bc6a58a..f371643 100644
--- a/android/gradle/wrapper/gradle-wrapper.properties
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,5 @@
-#Fri Jun 23 08:50:38 CEST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.0-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.7-all.zip
diff --git a/lib/screens/home.dart b/lib/screens/home.dart
index 6c5e78b..2cb4898 100644
--- a/lib/screens/home.dart
+++ b/lib/screens/home.dart
@@ -153,6 +153,15 @@ class _HomePageState extends State<HomePage> {
               ),
             ),
           ),
+          floatingActionButton: FloatingActionButton(
+            onPressed: () => Navigator.push(
+                context,
+                MaterialPageRoute(
+                    builder: (context) => ItemScreen(
+                        onSave: (passwordEntry) {}, isEditable: false))),
+            child: const Icon(Icons.add_outlined),
+            backgroundColor: purpleMaterialColor,
+          ),
         ),
         const Generate(generateType: GenerateType.password),
         const Icon(Icons.admin_panel_settings_outlined),
diff --git a/lib/screens/item_screen.dart b/lib/screens/item_screen.dart
index 284f7e7..07ac4a7 100644
--- a/lib/screens/item_screen.dart
+++ b/lib/screens/item_screen.dart
@@ -27,15 +27,15 @@ class ItemScreenArguments {
 class ItemScreen extends StatefulWidget {
   final bool isEditable;
   final void Function(PasswordEntry) onSave;
-  final void Function(PasswordEntry) onDelete;
-  final PasswordEntry passwordEntry;
+  final void Function(PasswordEntry)? onDelete;
+  final PasswordEntry? passwordEntry;
 
   const ItemScreen({
     Key? key,
     required this.isEditable,
-    required this.passwordEntry,
+    this.passwordEntry,
     required this.onSave,
-    required this.onDelete,
+    this.onDelete,
   }) : super(key: key);
 
   factory ItemScreen.fromItemScreenArguments(
@@ -63,10 +63,10 @@ class _ItemScreenState extends State<ItemScreen> {
   late final TextEditingController uriController;
 
   void _resetTextFields() {
-    nameController.text = widget.passwordEntry.name;
-    emailController.text = widget.passwordEntry.email;
-    passwordController.text = '        ';
-    uriController.text = widget.passwordEntry.uri.toString();
+    nameController.text = widget.passwordEntry?.name ?? "";
+    emailController.text = widget.passwordEntry?.email ?? "";
+    passwordController.text = widget.passwordEntry == null ? "" : '        ';
+    uriController.text = widget.passwordEntry?.uri.toString() ?? "";
   }
 
   @override
@@ -74,50 +74,54 @@ class _ItemScreenState extends State<ItemScreen> {
     super.initState();
     isPasswordVisible = false;
     isEditable = widget.isEditable;
-    nameController = TextEditingController(text: widget.passwordEntry.name);
+    nameController =
+        TextEditingController(text: widget.passwordEntry?.name ?? "");
 
-    emailController = TextEditingController(text: widget.passwordEntry.email);
+    emailController =
+        TextEditingController(text: widget.passwordEntry?.email ?? "");
 
     passwordController = TextEditingController(text: '        ');
 
     uriController =
-        TextEditingController(text: widget.passwordEntry.uri.toString());
+        TextEditingController(text: widget.passwordEntry?.uri.toString() ?? "");
 
     () async {
-      _key = generateKey(
-          await getMasterPassword(), pepper, widget.passwordEntry.createdAt);
+      _key = generateKey(await getMasterPassword(), pepper,
+          widget.passwordEntry?.createdAt ?? Timestamp.now());
     }();
   }
 
   void _onSave() async {
+    if (widget.passwordEntry == null) {}
+
     bool updated = false;
-    if (nameController.text != widget.passwordEntry.name) {
-      widget.passwordEntry.name = nameController.text;
+    if (nameController.text != widget.passwordEntry!.name) {
+      widget.passwordEntry!.name = nameController.text;
       updated = true;
     }
-    if (emailController.text != widget.passwordEntry.email) {
-      widget.passwordEntry.email = emailController.text;
+    if (emailController.text != widget.passwordEntry!.email) {
+      widget.passwordEntry!.email = emailController.text;
       updated = true;
     }
-    if (uriController.text != widget.passwordEntry.uri.toString()) {
-      widget.passwordEntry.uri = Uri.parse(uriController.text);
+    if (uriController.text != widget.passwordEntry!.uri.toString()) {
+      widget.passwordEntry!.uri = Uri.parse(uriController.text);
       updated = true;
     }
-    if (widget.passwordEntry.getPassword(_key) != passwordController.text) {
-      widget.passwordEntry.setPassword(passwordController.text, _key);
+    if (widget.passwordEntry!.getPassword(_key) != passwordController.text) {
+      widget.passwordEntry!.setPassword(passwordController.text, _key);
       updated = true;
     }
 
     if (updated) {
-      widget.passwordEntry.lastUpdated = Timestamp.now();
-      widget.onSave(widget.passwordEntry);
+      widget.passwordEntry!.lastUpdated = Timestamp.now();
+      widget.onSave(widget.passwordEntry!);
     }
 
     setState(() => isEditable = false);
   }
 
   void _onDelete() {
-    widget.onDelete(widget.passwordEntry);
+    widget.onDelete?.call(widget.passwordEntry!);
   }
 
   @override
@@ -176,7 +180,7 @@ class _ItemScreenState extends State<ItemScreen> {
                   onPressed: () => copyToClipboard(
                     context: context,
                     name: "Username",
-                    data: widget.passwordEntry.email,
+                    data: emailController.text,
                   ),
                 ),
               ),
@@ -203,10 +207,12 @@ class _ItemScreenState extends State<ItemScreen> {
                       constraints: const BoxConstraints(),
                       onPressed: () {
                         // Using not as state is set later
-                        passwordController.text =
-                            !isPasswordVisible || isEditable
-                                ? widget.passwordEntry.getPassword(_key)
-                                : '        ';
+                        if (widget.passwordEntry != null) {
+                          passwordController.text =
+                              !isPasswordVisible || isEditable
+                                  ? widget.passwordEntry!.getPassword(_key)
+                                  : '        ';
+                        }
                         setState(() => isPasswordVisible = !isPasswordVisible);
                       },
                     ),
@@ -220,7 +226,8 @@ class _ItemScreenState extends State<ItemScreen> {
                       onPressed: () => copyToClipboard(
                           context: context,
                           name: "Password",
-                          data: widget.passwordEntry.getPassword(_key)),
+                          data: widget.passwordEntry?.getPassword(_key) ??
+                              passwordController.text),
                     ),
                   ],
                 ),
@@ -261,34 +268,36 @@ class _ItemScreenState extends State<ItemScreen> {
                       padding: const EdgeInsets.only(left: 8),
                       constraints: const BoxConstraints(),
                       onPressed: () => copyToClipboard(
-                        context: context,
-                        name: "Url",
-                        data: widget.passwordEntry.uri.toString(),
+                        context: context,
+                        name: "Url",
+                        data: uriController.text,
                       ),
                     ),
                   ],
                 ),
               ),
-              if (!isEditable)
+              if (!isEditable && widget.passwordEntry != null)
                 Container(
                   padding: const EdgeInsets.only(left: 30, top: 10),
                   alignment: Alignment.centerLeft,
                   child: Text(
-                      "Last updated: ${timeago.format(widget.passwordEntry.lastUpdated.toDate())}",
+                      "Last updated: ${timeago.format(widget.passwordEntry!.lastUpdated.toDate())}",
                       style: Theme.of(context).textTheme.overline),
                 ),
             ],
           ),
         ),
       ),
-      floatingActionButton: FloatingActionButton(
-        backgroundColor: purpleMaterialColor,
-        onPressed: () {
-          setState(() => isEditable = !isEditable);
-          if (!isEditable) _resetTextFields();
-        },
-        child: Icon(isEditable ? Icons.clear : Icons.edit_outlined),
-      ),
+      floatingActionButton: widget.passwordEntry == null
+          ? null
+          : FloatingActionButton(
+              backgroundColor: purpleMaterialColor,
+              onPressed: () {
+                setState(() => isEditable = !isEditable);
+                if (!isEditable) _resetTextFields();
+              },
+              child: Icon(isEditable ? Icons.clear : Icons.edit_outlined),
+            ),
     );
   }
 }
