diff --git a/lib/screens/generate.dart b/lib/screens/generate.dart
index 67e98b2..e0c9ce4 100644
--- a/lib/screens/generate.dart
+++ b/lib/screens/generate.dart
@@ -291,7 +291,7 @@ class _GenerateState extends State<Generate> {
                     ),
                     Expanded(
                       child: Slider(
-                        label: '5',
+                        label: length.toString(),
                         value: length.toDouble(),
                         min: 8,
                         max: 50,
diff --git a/lib/screens/home.dart b/lib/screens/home.dart
index 354e9ab..6c5e78b 100644
--- a/lib/screens/home.dart
+++ b/lib/screens/home.dart
@@ -1,4 +1,5 @@
 import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:curved_navigation_bar/curved_navigation_bar.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_dotenv/flutter_dotenv.dart';
 import 'package:passwordmanager/components/password_widget.dart';
@@ -27,11 +28,19 @@ class _HomePageState extends State<HomePage> {
 
   final TextEditingController _controller = TextEditingController();
 
+  late final PageController pageController;
+
+  GlobalKey<CurvedNavigationBarState> _bottomNavigationKey = GlobalKey();
+
   @override
   void initState() {
     super.initState();
     entries = <PasswordWidget>[];
     filteredEntries = <PasswordWidget>[];
+    pageController = PageController(
+      initialPage: selectedTabIndex,
+      keepPage: true,
+    );
   }
 
   void _search(String query) {
@@ -90,77 +99,94 @@ class _HomePageState extends State<HomePage> {
   @override
   Widget build(BuildContext context) {
     final Size size = MediaQuery.of(context).size;
-    final homeBody = [
-      Padding(
-        padding: const EdgeInsets.symmetric(horizontal: 15.0, vertical: 10.0),
-        child: SizedBox(
-          height: size.height * 0.585,
-          width: double.infinity,
-          child: StreamBuilder(
-            stream: repository.getStream(),
-            builder: (BuildContext context, AsyncSnapshot snapshot) {
-              if (!snapshot.hasData) return const LinearProgressIndicator();
-              return _buildList(context, snapshot.data?.docs ?? []);
-            },
+    final homeBody = PageView(
+      controller: pageController,
+      onPageChanged: (index) {
+        _bottomNavigationKey.currentState!.setPage(index);
+        setState(() => selectedTabIndex = index);
+      },
+      children: [
+        Scaffold(
+          appBar: AppBar(
+            elevation: 0,
+            backgroundColor: Colors.transparent,
+            foregroundColor: Colors.black,
+            title: RoundedTextFormField(
+              controller: _controller,
+              style: const TextStyle(
+                fontSize: 18,
+              ),
+              hintText: "Search password",
+              icon: Icons.search_outlined,
+              suffixIcon: isSearching
+                  ? IconButton(
+                      icon: const Icon(
+                        Icons.close_outlined,
+                        color: darkBlueishColor,
+                      ),
+                      onPressed: () {
+                        _controller.clear();
+                        setState(() => isSearching = false);
+                      },
+                    )
+                  : null,
+              color: darkBlueishColor,
+              onChanged: (value) {
+                _search(value);
+                setState(() => isSearching = value.isNotEmpty);
+              },
+            ),
+            automaticallyImplyLeading: false,
+          ),
+          body: Padding(
+            padding:
+                const EdgeInsets.symmetric(horizontal: 15.0, vertical: 10.0),
+            child: SizedBox(
+              height: size.height * 0.585,
+              width: double.infinity,
+              child: StreamBuilder(
+                stream: repository.getStream(),
+                builder: (BuildContext context, AsyncSnapshot snapshot) {
+                  if (!snapshot.hasData) return const LinearProgressIndicator();
+                  return _buildList(context, snapshot.data?.docs ?? []);
+                },
+              ),
+            ),
           ),
         ),
-      ),
-      const Generate(generateType: GenerateType.password),
-      const Icon(Icons.admin_panel_settings_outlined),
-    ];
+        const Generate(generateType: GenerateType.password),
+        const Icon(Icons.admin_panel_settings_outlined),
+      ],
+    );
 
     return Scaffold(
-      appBar: AppBar(
-        elevation: 0,
-        backgroundColor: Colors.transparent,
-        title: RoundedTextFormField(
-          controller: _controller,
-          style: const TextStyle(
-            fontSize: 18,
-          ),
-          hintText: "Search password",
-          icon: Icons.search_rounded,
-          suffixIcon: isSearching
-              ? IconButton(
-                  icon: const Icon(
-                    Icons.close_outlined,
-                    color: darkBlueishColor,
-                  ),
-                  onPressed: () {
-                    _controller.clear();
-                    setState(() => isSearching = false);
-                  },
-                )
-              : null,
-          color: darkBlueishColor,
-          onChanged: (value) {
-            _search(value);
-            setState(() => isSearching = value.isNotEmpty);
-          },
-        ),
-      ),
-      body: homeBody[selectedTabIndex],
-      bottomNavigationBar: BottomNavigationBar(
+      body: homeBody,
+      bottomNavigationBar: CurvedNavigationBar(
+        key: _bottomNavigationKey,
         items: const [
-          BottomNavigationBarItem(
-            icon: Icon(Icons.lock_outline_rounded),
-            label: "Vault",
+          Icon(
+            Icons.lock_outline_rounded,
+            color: Colors.white,
           ),
-          BottomNavigationBarItem(
-            icon: Icon(Icons.repeat_outlined),
-            label: "Generate",
+          Icon(
+            Icons.repeat_outlined,
+            color: Colors.white,
           ),
-          BottomNavigationBarItem(
-            icon: Icon(Icons.settings_outlined),
-            label: "Settings",
+          Icon(
+            Icons.settings_outlined,
+            color: Colors.white,
           ),
         ],
-        currentIndex: selectedTabIndex,
-        selectedItemColor: darkBlueishColor,
-        unselectedItemColor: Colors.black,
-        onTap: (int item) {
+        color: purpleMaterialColor,
+        buttonBackgroundColor: purpleMaterialColor,
+        backgroundColor: Colors.white,
+        animationCurve: Curves.bounceInOut,
+        animationDuration: const Duration(milliseconds: 200),
+        height: 60,
+        onTap: (int index) {
           setState(() {
-            selectedTabIndex = item;
+            selectedTabIndex = index;
+            pageController.jumpToPage(index);
           });
         },
       ),
